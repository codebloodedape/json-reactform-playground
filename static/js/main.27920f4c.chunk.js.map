{"version":3,"sources":["index.js"],"names":["model","addElementModelCustomStyles","overlay","backgroundColor","content","top","left","right","bottom","marginRight","transform","background","App","props","submit","params","console","log","onElementClick","elementName","editJson","state","jsonToForm","name","setState","showAddElementModel","onAddElementClick","type","required","disabled","onAddElement","jsonToFormString","JSON","stringify","isJsonValid","errorMessage","onAddElementClose","onElementNameChange","event","target","value","onElementTypeChange","placeHolder","format","createable","onRequiredChange","onDisabledChange","onDefaultValueChange","defaultValue","onPlaceHolderChange","onEditorTextChange","onTextEditorRun","json","parse","e","jsonChangeTimer","className","elementsName","push","onClick","this","placeHolderElement","onChange","renderElementsFromJson","isOpen","contentLabel","onRequestClose","style","renderVisualEditor","classString","getClassNamesForEditPane","renderTextEditor","onSubmit","renderTitle","renderVisualEditorPane","renderTextEditorPane","renderResultPane","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27920f4c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport JsonToForm from 'json-reactform';\nimport Modal from 'react-modal';\nimport './index.css'\n\nconst model = {\n  \"Plan Date\": {\n    \"type\": \"date\",\n    \"format\": \"dd MMMM yyyy\",\n    \"required\": true\n  },\n  \"Qty\": {\n    \"type\": \"number\",\n    \"required\": true\n  },\n  \"Item Number\": {\n    \"type\": \"select\",\n    \"required\": true,\n    \"options\": [ //use static json arry to get options\n      {\n        \"value\": \"1\",\n        \"label\": \"item 1\"\n      },\n      {\n        \"value\": \"2\",\n        \"label\": \"item 2\"\n      }\n    ],\n  },\n  \"Parts\": {\n    \"type\": \"checkbox\",\n    \"required\": true,\n    \"options\": [ //use static json arry to get options\n      {\n        \"value\": \"checkbox_item_1\",\n        \"label\": \"Checkbox 1\"\n      },\n      {\n        \"value\": \"checkbox_item_2\",\n        \"label\": \"Checkbox 2\"\n      }\n    ],\n  },\n  \"Status\": {\n    \"type\": \"radio\",\n    \"required\": true,\n    \"options\": [ //use static json arry to get options\n      {\n        \"value\": \"completed\",\n        \"label\": \"Completed\"\n      },\n      {\n        \"value\": \"not_completed\",\n        \"label\": \"Not Completed\"\n      }\n    ],\n  },\n  \"Save\": { // button submit\n    \"type\": \"submit\",\n  }\n}\n\nconst addElementModelCustomStyles = {\n  overlay: {\n    backgroundColor: 'rgba(0, 0, 0, 0.55)',\n  },\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n    background: '#00bba1'\n  }\n};\n\nconst JSON_CHANGE_DEBOUNCE_TIME = 800\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      jsonChangeTimer: null,\n      jsonToForm: model,\n      jsonToFormString: JSON.stringify(model, null, 2),\n      isJsonValid: true,\n      errorMessage: '',\n      showAddElementModel: false,\n      editJson: {}\n    }\n  }\n\n  submit = (params) => {\n    console.log(params);\n  }\n\n  renderTitle() {\n    return (\n      <h1 className='title'>\n        JSON Reactform Playground\n      </h1>\n    )\n  }\n\n  onElementClick = (elementName) => {\n    let editJson = this.state.jsonToForm[elementName]\n    editJson.name = elementName\n    this.setState({\n      editJson: editJson,\n      showAddElementModel: true\n    })\n  }\n\n  renderElementsFromJson() {\n    let elementsName = []\n    for (let elementName in this.state.jsonToForm) {\n      elementsName.push(<div className={'elementName'} onClick={() => this.onElementClick(elementName)}>{elementName}</div>)\n    }\n    return elementsName\n  }\n\n  onAddElementClick = () => {\n\n    this.setState({\n      showAddElementModel: true,\n      editJson: {\n        name: '',\n        type: 'text',\n        required: true,\n        disabled: false\n      }\n    })\n  }\n\n  onAddElement = () => {\n    let jsonToForm = this.state.jsonToForm\n    jsonToForm[this.state.editJson.name] = this.state.editJson\n    this.setState({\n      showAddElementModel: false,\n      jsonToForm: jsonToForm,\n      jsonToFormString: JSON.stringify(jsonToForm, null, 2),\n      isJsonValid: true,\n      errorMessage: ''\n    })\n  }\n\n  onAddElementClose = () => {\n    this.setState({\n      showAddElementModel: false\n    })\n  }\n\n  onElementNameChange = (event) => {\n    let editJson = this.state.editJson\n    editJson.name = event.target.value\n    this.setState({ editJson: editJson })\n  }\n\n  onElementTypeChange = (event) => {\n    let editJson = {\n      name: this.state.editJson.name,\n      type: event.target.value,\n      required: true,\n      disabled: false\n    }\n    switch (editJson.type) {\n      case 'text':\n      case 'number':\n      case 'textarea':\n        // editJson.defaultValue = ''\n        editJson.placeHolder = ''\n        break\n      case 'date':\n        // editJson.defaultValue = new Date()\n        editJson.placeHolder = null\n        editJson.format = ''\n      case 'select':\n        // editJson.defaultValue\n        editJson.placeHolder = ''\n        editJson.createable = 'true'\n    }\n    this.setState({ editJson: editJson });\n  }\n\n  onRequiredChange = (event) => {\n    let editJson = this.state.editJson\n    editJson.required = event.target.value === 'true' ? true : false\n    this.setState({ editJson: editJson });\n\n  }\n\n  onDisabledChange = (event) => {\n    let editJson = this.state.editJson\n    editJson.disabled = event.target.value === 'true' ? true : false\n    this.setState({ editJson: editJson })\n  }\n\n  onDefaultValueChange = (event) => {\n    let editJson = this.state.editJson\n    editJson.defaultValue = event.target.value\n    this.setState({ editJson: editJson });\n  }\n\n  onPlaceHolderChange = (event) => {\n    let editJson = this.state.editJson\n    editJson.placeHolder = event.target.value\n    this.setState({ editJson: editJson });\n\n  }\n\n  renderVisualEditor() {\n    let editJson = this.state.editJson\n\n    let placeHolderElement = editJson.placeHolder !== null ? (\n      <label>\n        Place Holder\n        <input type='text' onChange={this.onPlaceHolderChange} value={editJson.placeHolder}></input>\n      </label>\n    ) : null\n\n    return (\n      <div>\n        {this.renderElementsFromJson()}\n        <div className=\"elementName\" onClick={this.onAddElementClick}>Add Item</div>\n        <Modal\n          isOpen={this.state.showAddElementModel}\n          contentLabel=\"Minimal Modal Example\"\n\n          onRequestClose={this.onAddElementClose}\n          style={addElementModelCustomStyles}\n        >\n          <div className=\"paneHeader\">\n            <h2>Add / Edit Element</h2>\n          </div>\n          <label>\n            Name\n            <input type='text' onChange={this.onElementNameChange} defaultValue='' value={editJson.name}></input>\n          </label>\n          <br />\n          <label>\n            Element Type\n          <select defaultValue='text' value={editJson.type} onChange={this.onElementTypeChange}>\n              <option value=\"text\">Text</option>\n              <option value=\"number\">Number</option>\n              <option value=\"textarea\">Textarea</option>\n              <option value=\"date\">Date</option>\n              <option value=\"select\">Select</option>\n              <option value=\"checkbox\">Checkbox</option>\n              <option value=\"radio\">Radio</option>\n            </select>\n          </label>\n          <br />\n          <label>\n            Required\n          <select value={editJson.required} defaultValue='true' onChange={this.onRequiredChange}>\n              <option value='true'>True</option>\n              <option value=\"false\">False</option>\n            </select>\n          </label>\n          <br />\n          <label>\n            Disabled\n          <select value={editJson.disabled} defaultValue='false' onChange={this.onDisabledChange}>\n              <option value='true'>True</option>\n              <option value=\"false\">False</option>\n            </select>\n          </label>\n          {/* <label>\n            Default Value\n            <input type='text' onChange={this.onDefaultValueChange} value={editJson.defaultValue}></input>\n          </label> */}\n          <br />\n          {placeHolderElement}\n          <br />\n          <button onClick={this.onAddElement}>Done</button>\n          <button onClick={this.onAddElementClose}>Cancel</button>\n\n        </Modal>\n      </div>\n    )\n  }\n\n  renderVisualEditorPane() {\n    return (\n      <div className=\"pane\">\n        <div className=\"paneHeader\">\n          <h2>Visual Editor</h2>\n        </div>\n        <div className=\"paneContent\">\n          {this.renderVisualEditor()}\n        </div>\n      </div>\n    )\n  }\n\n  getClassNamesForEditPane() {\n    let classString = 'paneContent textEditorPaneContent'\n    if (!this.state.isJsonValid) {\n      classString += ' errorPaneContent'\n    }\n    return classString\n  }\n\n  onEditorTextChange = (event) => {\n    this.setState({\n      jsonToFormString: event.target.value\n    })\n  }\n\n  onTextEditorRun = () => {\n    // if (this.state.jsonChangeTimer) {\n    //   clearTimeout(this.state.jsonChangeTimer)\n    // }\n\n    // let jsonText = jsonToFormString\n\n    // let jsonChangeTimer = setTimeout(() => {\n    let json = {}\n    try {\n      if (this.state.jsonToFormString !== '')\n        json = JSON.parse(this.state.jsonToFormString)\n    }\n    catch (e) {\n      this.setState({ isJsonValid: false, errorMessage: 'JSON is not meaningful!' })\n      return\n    }\n\n    this.setState({\n      jsonToForm: json,\n      errorMessage: '',\n      isJsonValid: true\n    })\n    // }, JSON_CHANGE_DEBOUNCE_TIME);\n\n    // this.setState({\n    //   jsonChangeTimer: jsonChangeTimer\n    // })\n  }\n\n  renderTextEditor() {\n    return <textarea className='textEditor' onChange={this.onEditorTextChange} value={this.state.jsonToFormString} />\n  }\n\n  renderTextEditorPane() {\n    return (\n      <div className=\"pane\">\n        <div className=\"paneHeader\">\n          <div>\n            <h2>Text Editor</h2>\n            <div onClick={this.onTextEditorRun} className='runButton'>Run</div>\n          </div>\n\n          <div className='errorMessage'>{this.state.errorMessage}</div>\n        </div>\n        <div className={this.getClassNamesForEditPane()}>\n          {this.renderTextEditor()}\n        </div>\n      </div>\n    )\n  }\n\n  renderResultPane() {\n    return (\n      <div className=\"pane resultPane\">\n        <div className=\"paneHeader\"> <h2 >Result</h2></div>\n        <div className=\"paneContent resultPaneContent\">\n          <JsonToForm model={this.state.jsonToForm} onSubmit={this.submit} />\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        {this.renderTitle()}\n        <div className='content'>\n          <div className=\"subcontent leftSubcontent\">\n            {this.renderVisualEditorPane()}\n            {this.renderTextEditorPane()}\n          </div>\n          <div className=\"subcontent rightSubcontent\">\n            {this.renderResultPane()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}