{"version":3,"sources":["index.js"],"names":["model","addElementModelCustomStyles","overlay","backgroundColor","content","top","left","right","bottom","marginRight","transform","background","App","props","submit","params","console","log","onElementClick","elementName","editJson","elementProps","state","jsonToForm","name","setState","showAddElementModel","onElementDelete","jsonToFormString","JSON","stringify","onAddElementClick","type","required","disabled","onAddElement","isJsonValid","errorMessage","onAddElementClose","onElementNameChange","event","target","value","onElementTypeChange","placeHolder","format","options","onRequiredChange","onDisabledChange","onDefaultValueChange","defaultValue","onPlaceHolderChange","onEditorTextChange","onTextEditorRun","json","parse","e","jsonChangeTimer","className","elementsName","push","title","onClick","stopPropagation","this","placeHolderElement","onChange","renderElementsFromJson","isOpen","contentLabel","onRequestClose","style","renderVisualEditor","classString","getClassNamesForEditPane","renderTextEditor","onSubmit","renderTitle","renderVisualEditorPane","renderTextEditorPane","renderResultPane","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57a5babe.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport JsonToForm from 'json-reactform';\nimport Modal from 'react-modal';\nimport './index.css'\n\nconst model = {\n  // \"Plan Date\": {\n  //   \"type\": \"date\",\n  //   \"format\": \"dd MMMM yyyy\",\n  //   \"required\": true\n  // },\n  // \"Qty\": {\n  //   \"type\": \"number\",\n  //   \"required\": true\n  // },\n  // \"Item Number\": {\n  //   \"type\": \"select\",\n  //   \"required\": true,\n  //   \"options\": [ //use static json arry to get options\n  //     {\n  //       \"value\": \"1\",\n  //       \"label\": \"item 1\"\n  //     },\n  //     {\n  //       \"value\": \"2\",\n  //       \"label\": \"item 2\"\n  //     }\n  //   ],\n  // },\n  // \"Parts\": {\n  //   \"type\": \"checkbox\",\n  //   \"required\": true,\n  //   \"options\": [ //use static json arry to get options\n  //     {\n  //       \"value\": \"checkbox_item_1\",\n  //       \"label\": \"Checkbox 1\"\n  //     },\n  //     {\n  //       \"value\": \"checkbox_item_2\",\n  //       \"label\": \"Checkbox 2\"\n  //     }\n  //   ],\n  // },\n  // \"Status\": {\n  //   \"type\": \"radio\",\n  //   \"required\": true,\n  //   \"options\": [ //use static json arry to get options\n  //     {\n  //       \"value\": \"completed\",\n  //       \"label\": \"Completed\"\n  //     },\n  //     {\n  //       \"value\": \"not_completed\",\n  //       \"label\": \"Not Completed\"\n  //     }\n  //   ],\n  // },\n  // \"Save\": { // button submit\n  //   \"type\": \"submit\",\n  // }\n}\n\nconst addElementModelCustomStyles = {\n  overlay: {\n    backgroundColor: 'rgba(0, 0, 0, 0.55)',\n  },\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n    background: '#00bba1'\n  }\n};\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      jsonChangeTimer: null,\n      jsonToForm: model,\n      jsonToFormString: JSON.stringify(model, null, 2),\n      isJsonValid: true,\n      errorMessage: '',\n      showAddElementModel: false,\n      editJson: {\n        name: '',\n        elementProps: {\n\n        }\n      }\n    }\n  }\n\n  submit = (params) => {\n    console.log(params);\n  }\n\n  renderTitle() {\n    return (\n      <h1 className='title'>\n        JSON Reactform Playground\n      </h1>\n    )\n  }\n\n  onElementClick = (elementName) => {\n    let editJson = {}\n    editJson.elementProps = this.state.jsonToForm[elementName]\n    editJson.name = elementName\n    this.setState({\n      editJson: editJson,\n      showAddElementModel: true\n    })\n  }\n\n  onElementDelete = (elementName) => {\n    let jsonToForm = this.state.jsonToForm\n    delete jsonToForm[elementName]\n    this.setState({\n      jsonToForm: jsonToForm,\n      jsonToFormString: JSON.stringify(jsonToForm, null, 2)\n    })\n  }\n\n  renderElementsFromJson() {\n    let elementsName = []\n    for (let elementName in this.state.jsonToForm) {\n      elementsName.push(\n        <div className={'elementName'} title='Edit Element' onClick={() => this.onElementClick(elementName)}>\n          {elementName}\n          <div title='Delete element' onClick={(e) => {\n            this.onElementDelete(elementName)\n            e.stopPropagation()\n          }}\n            className='elementDeleteButton'>x</div>\n        </div>\n      )\n    }\n    return elementsName\n  }\n\n  onAddElementClick = () => {\n\n    this.setState({\n      showAddElementModel: true,\n      editJson: {\n        name: '',\n        elementProps: {\n          type: 'text',\n          required: true,\n          disabled: false\n        }\n      }\n    })\n  }\n\n  onAddElement = () => {\n    let jsonToForm = this.state.jsonToForm\n    jsonToForm[this.state.editJson.name] = this.state.editJson.elementProps\n    this.setState({\n      showAddElementModel: false,\n      jsonToForm: jsonToForm,\n      jsonToFormString: JSON.stringify(jsonToForm, null, 2),\n      isJsonValid: true,\n      errorMessage: ''\n    })\n  }\n\n  onAddElementClose = () => {\n    this.setState({\n      showAddElementModel: false\n    })\n  }\n\n  onElementNameChange = (event) => {\n    let editJson = this.state.editJson\n    editJson.name = event.target.value\n    this.setState({ editJson: editJson })\n  }\n\n  onElementTypeChange = (event) => {\n    let editJson = {\n      name: this.state.editJson.name,\n      elementProps: {\n        type: event.target.value,\n        required: true,\n      }\n    }\n    switch (editJson.elementProps.type) {\n      case 'text':\n      case 'number':\n      case 'textarea':\n        // editJson.defaultValue = ''\n        editJson.elementProps.placeHolder = ''\n        break\n      case 'date':\n        // editJson.defaultValue = new Date()\n        editJson.elementProps.placeHolder = null\n        editJson.elementProps.format = ''\n        break;\n      case 'select':\n        // editJson.defaultValue\n        editJson.elementProps.options = [\n          {'value': '1', 'label': 'item 1'},\n          {'value': '2', 'label': 'item 2'}\n        ]\n        break;\n      case 'checkbox':\n        editJson.elementProps[\"options\"] = [ //use static json arry to get options\n          {\n            \"value\": \"checkbox_item_1\",\n            \"label\": \"Checkbox 1\"\n          },\n          {\n            \"value\": \"checkbox_item_2\",\n            \"label\": \"Checkbox 2\"\n          }\n        ]\n        break;\n    }\n    this.setState({ editJson: editJson });\n  }\n\n  onRequiredChange = (event) => {\n    let editJson = this.state.editJson\n    editJson.elementProps.required = event.target.value === 'true' ? true : false\n    this.setState({ editJson: editJson });\n\n  }\n\n  onDisabledChange = (event) => {\n    let editJson = this.state.editJson\n    editJson.elementProps.disabled = event.target.value === 'true' ? true : false\n    this.setState({ editJson: editJson })\n  }\n\n  onDefaultValueChange = (event) => {\n    let editJson = this.state.editJson\n    editJson.elementProps.defaultValue = event.target.value\n    this.setState({ editJson: editJson });\n  }\n\n  onPlaceHolderChange = (event) => {\n    let editJson = this.state.editJson\n    editJson.elementProps.placeHolder = event.target.value\n    this.setState({ editJson: editJson });\n\n  }\n\n  renderVisualEditor() {\n    let editJson = this.state.editJson\n\n    let placeHolderElement = editJson.elementProps.placeHolder !== null ? (\n      <label>\n        Place Holder\n        <input type='text' onChange={this.onPlaceHolderChange} value={editJson.elementProps.placeHolder}></input>\n      </label>\n    ) : null\n\n    return (\n      <div>\n        {this.renderElementsFromJson()}\n        <div className=\"elementName\" onClick={this.onAddElementClick}>Add Element</div>\n        <Modal\n          isOpen={this.state.showAddElementModel}\n          contentLabel=\"Minimal Modal Example\"\n\n          onRequestClose={this.onAddElementClose}\n          style={addElementModelCustomStyles}\n        >\n          <div className=\"paneHeader\">\n            <h2>Add / Edit Element</h2>\n          </div>\n          <label>\n            Name\n            <input type='text' onChange={this.onElementNameChange} value={editJson.name}></input>\n          </label>\n          <br />\n          <label>\n            Element Type\n          <select value={editJson.elementProps.type} onChange={this.onElementTypeChange}>\n              <option value=\"text\">Text</option>\n              <option value=\"number\">Number</option>\n              <option value=\"textarea\">Textarea</option>\n              <option value=\"date\">Date</option>\n              <option value=\"select\">Select</option>\n              <option value=\"checkbox\">Checkbox</option>\n              <option value=\"radio\">Radio</option>\n            </select>\n          </label>\n          <br />\n          <label>\n            Required\n          <select value={editJson.elementProps.required} onChange={this.onRequiredChange}>\n              <option value='true'>True</option>\n              <option value=\"false\">False</option>\n            </select>\n          </label>\n          <br />\n          <label>\n            Disabled\n          <select value={editJson.elementProps.disabled} onChange={this.onDisabledChange}>\n              <option value='true'>True</option>\n              <option value=\"false\">False</option>\n            </select>\n          </label>\n          {/* <label>\n            Default Value\n            <input type='text' onChange={this.onDefaultValueChange} value={editJson.defaultValue}></input>\n          </label> */}\n          <br />\n          {placeHolderElement}\n          <br />\n          <button onClick={this.onAddElement}>Done</button>\n          <button onClick={this.onAddElementClose}>Cancel</button>\n\n        </Modal>\n      </div>\n    )\n  }\n\n  renderVisualEditorPane() {\n    return (\n      <div className=\"pane\">\n        <div className=\"paneHeader\">\n          <h2>Visual Editor</h2>\n        </div>\n        <div className=\"paneContent\">\n          {this.renderVisualEditor()}\n        </div>\n      </div>\n    )\n  }\n\n  getClassNamesForEditPane() {\n    let classString = 'paneContent textEditorPaneContent'\n    if (!this.state.isJsonValid) {\n      classString += ' errorPaneContent'\n    }\n    return classString\n  }\n\n  onEditorTextChange = (event) => {\n    this.setState({\n      jsonToFormString: event.target.value\n    })\n  }\n\n  onTextEditorRun = () => {\n    // if (this.state.jsonChangeTimer) {\n    //   clearTimeout(this.state.jsonChangeTimer)\n    // }\n\n    // let jsonText = jsonToFormString\n\n    // let jsonChangeTimer = setTimeout(() => {\n    let json = {}\n    try {\n      if (this.state.jsonToFormString !== '')\n        json = JSON.parse(this.state.jsonToFormString)\n    }\n    catch (e) {\n      this.setState({ isJsonValid: false, errorMessage: 'JSON is not meaningful!' })\n      return\n    }\n\n    this.setState({\n      jsonToForm: json,\n      errorMessage: '',\n      isJsonValid: true\n    })\n    // }, JSON_CHANGE_DEBOUNCE_TIME);\n\n    // this.setState({\n    //   jsonChangeTimer: jsonChangeTimer\n    // })\n  }\n\n  renderTextEditor() {\n    return <textarea className='textEditor' onChange={this.onEditorTextChange} value={this.state.jsonToFormString} />\n  }\n\n  renderTextEditorPane() {\n    return (\n      <div className=\"pane\">\n        <div className=\"paneHeader\">\n          <div>\n            <h2>Text Editor</h2>\n            <div onClick={this.onTextEditorRun} className='runButton'>Run</div>\n          </div>\n\n          <div className='errorMessage'>{this.state.errorMessage}</div>\n        </div>\n        <div className={this.getClassNamesForEditPane()}>\n          {this.renderTextEditor()}\n        </div>\n      </div>\n    )\n  }\n\n  renderResultPane() {\n    return (\n      <div className=\"pane resultPane\">\n        <div className=\"paneHeader\"> <h2 >Result</h2></div>\n        <div className=\"paneContent resultPaneContent\">\n          <JsonToForm model={this.state.jsonToForm} onSubmit={this.submit} />\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        {this.renderTitle()}\n        <div className='content'>\n          <div className=\"subcontent leftSubcontent\">\n            {this.renderVisualEditorPane()}\n            {this.renderTextEditorPane()}\n          </div>\n          <div className=\"subcontent rightSubcontent\">\n            {this.renderResultPane()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}